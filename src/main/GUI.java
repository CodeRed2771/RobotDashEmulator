package main;

import com.coderedrobotics.tiberius.libs.dash.DashBoard;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Michael
 */
public class GUI extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //<editor-fold defaultstate="collapsed" desc=" Center Window to Screen ">
        GraphicsEnvironment g = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] devices = g.getScreenDevices();

        int width = devices[0].getDisplayMode().getWidth();
        int height = devices[0].getDisplayMode().getHeight();

        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (width - w) / 2;
        int y = (height - h) / 2;
        this.setLocation(x, y);
        //</editor-fold>
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        battery = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pickupAngle = new javax.swing.JSlider();
        singleControllerMode = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        pickupReady = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        stringPot = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        pickupMove = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cocking = new javax.swing.JSlider();
        hallEncoders = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        pickupWheels = new javax.swing.JSlider();
        pedals = new javax.swing.JSlider();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        petalsReady = new javax.swing.JSlider();
        cocked = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        battery.setMaximum(14);
        battery.setOrientation(javax.swing.JSlider.VERTICAL);
        battery.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                batteryStateChanged(evt);
            }
        });

        jLabel1.setText("Battery");

        jLabel2.setText("Pickup Angle");

        pickupAngle.setMaximum(360);
        pickupAngle.setOrientation(javax.swing.JSlider.VERTICAL);
        pickupAngle.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pickupAngleStateChanged(evt);
            }
        });

        singleControllerMode.setMajorTickSpacing(1);
        singleControllerMode.setMaximum(1);
        singleControllerMode.setSnapToTicks(true);
        singleControllerMode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                singleControllerModeStateChanged(evt);
            }
        });

        jLabel3.setText("S.C.M.");

        pickupReady.setMajorTickSpacing(1);
        pickupReady.setMaximum(1);
        pickupReady.setSnapToTicks(true);
        pickupReady.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pickupReadyStateChanged(evt);
            }
        });

        jLabel4.setText("Pkp Ready");

        stringPot.setMajorTickSpacing(1);
        stringPot.setMaximum(1);
        stringPot.setSnapToTicks(true);
        stringPot.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stringPotStateChanged(evt);
            }
        });

        jLabel5.setText("String Pot");

        pickupMove.setMajorTickSpacing(1);
        pickupMove.setMaximum(1);
        pickupMove.setSnapToTicks(true);
        pickupMove.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pickupMoveStateChanged(evt);
            }
        });

        jLabel6.setText("Pkp Move");

        jLabel7.setText("Hall Encdrs");

        jLabel8.setText("Cocking");

        cocking.setMajorTickSpacing(1);
        cocking.setMaximum(1);
        cocking.setSnapToTicks(true);
        cocking.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cockingStateChanged(evt);
            }
        });

        hallEncoders.setMajorTickSpacing(1);
        hallEncoders.setMaximum(1);
        hallEncoders.setSnapToTicks(true);
        hallEncoders.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hallEncodersStateChanged(evt);
            }
        });

        jLabel9.setText("Pkp Wheels");

        pickupWheels.setMajorTickSpacing(1);
        pickupWheels.setMaximum(1);
        pickupWheels.setSnapToTicks(true);
        pickupWheels.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pickupWheelsStateChanged(evt);
            }
        });

        pedals.setMajorTickSpacing(1);
        pedals.setMaximum(1);
        pedals.setSnapToTicks(true);
        pedals.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pedalsStateChanged(evt);
            }
        });

        jLabel10.setText("Pedals");

        jLabel11.setText("Petals Ready");

        jLabel12.setText("Cocked");

        petalsReady.setMajorTickSpacing(1);
        petalsReady.setMaximum(1);
        petalsReady.setSnapToTicks(true);
        petalsReady.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                petalsReadyStateChanged(evt);
            }
        });

        cocked.setMajorTickSpacing(1);
        cocked.setMaximum(1);
        cocked.setSnapToTicks(true);
        cocked.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cockedStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(battery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pickupAngle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(singleControllerMode, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pickupReady, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(stringPot, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pickupMove, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pedals, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pickupWheels, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cocking, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hallEncoders, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cocked, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(petalsReady, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cocking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hallEncoders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pickupWheels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pedals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(petalsReady, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cocked, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stringPot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pickupMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pickupReady, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(singleControllerMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(battery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pickupAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void batteryStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_batteryStateChanged

    }//GEN-LAST:event_batteryStateChanged

    private void pickupAngleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pickupAngleStateChanged
        DashboardDriverPlugin.updatePickupAngle(pickupAngle.getValue());
    }//GEN-LAST:event_pickupAngleStateChanged

    private void cockingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cockingStateChanged
        DashboardDriverPlugin.updateCockingStatus(cocking.getValue());
    }//GEN-LAST:event_cockingStateChanged

    private void pedalsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pedalsStateChanged
        DashboardDriverPlugin.updatePedalsMovingStatus(pedals.getValue());
    }//GEN-LAST:event_pedalsStateChanged

    private void stringPotStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stringPotStateChanged
        DashboardDriverPlugin.updateStringPotStatus(stringPot.getValue());
    }//GEN-LAST:event_stringPotStateChanged

    private void singleControllerModeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_singleControllerModeStateChanged
        DashboardDriverPlugin.updateSingleControllerModeStatus(singleControllerMode.getValue());
    }//GEN-LAST:event_singleControllerModeStateChanged

    private void hallEncodersStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hallEncodersStateChanged
        DashboardDriverPlugin.updateHallEncodersStatus(hallEncoders.getValue());
    }//GEN-LAST:event_hallEncodersStateChanged

    private void pickupWheelsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pickupWheelsStateChanged
        DashboardDriverPlugin.updatePickupWheelsStatus(pickupWheels.getValue());
    }//GEN-LAST:event_pickupWheelsStateChanged

    private void pickupMoveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pickupMoveStateChanged
        DashboardDriverPlugin.updatePickupMovingStatus(pickupMove.getValue());
    }//GEN-LAST:event_pickupMoveStateChanged

    private void pickupReadyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pickupReadyStateChanged
        DashboardDriverPlugin.updatePickupReadyStatus(pickupReady.getValue());
    }//GEN-LAST:event_pickupReadyStateChanged

    private void petalsReadyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_petalsReadyStateChanged
        DashboardDriverPlugin.updatePedalsReadyStatus(petalsReady.getValue());
    }//GEN-LAST:event_petalsReadyStateChanged

    private void cockedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cockedStateChanged
        DashboardDriverPlugin.updateCockedStatus(cocked.getValue());
    }//GEN-LAST:event_cockedStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the System Default Look and Feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        DashBoard dash = new DashBoard();
        DashboardDriverPlugin.init(dash);

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUI gui = new GUI();
                gui.setVisible(true);
                Thread thread = new Thread(gui);
                thread.start();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider battery;
    private javax.swing.JSlider cocked;
    private javax.swing.JSlider cocking;
    private javax.swing.JSlider hallEncoders;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSlider pedals;
    private javax.swing.JSlider petalsReady;
    private javax.swing.JSlider pickupAngle;
    private javax.swing.JSlider pickupMove;
    private javax.swing.JSlider pickupReady;
    private javax.swing.JSlider pickupWheels;
    private javax.swing.JSlider singleControllerMode;
    private javax.swing.JSlider stringPot;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            DashboardDriverPlugin.updateBatteryVoltage((double) battery.getValue());
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

}
